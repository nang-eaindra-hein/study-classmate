{"ast":null,"code":"var _jsxFileName = \"/Users/nangeaindrahein/study-classmate/client/src/pages/StudyPage.js\",\n  _s = $RefreshSig$();\n// src/pages/StudyPage.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './StudyPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StudyPage() {\n  _s();\n  const navigate = useNavigate();\n  const username = localStorage.getItem('username');\n  const fileInputRef = useRef(null);\n\n  // Background style\n  const bgStyle = {\n    backgroundImage: `url(${process.env.PUBLIC_URL}/photos/pages4.jpg)`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat'\n  };\n\n  // ─── STATE ───────────────────────────────────────────────────────\n  // Summaries\n  const [rawNotes, setRawNotes] = useState('');\n  const [file, setFile] = useState(null);\n  const [summary, setSummary] = useState('');\n  const [loadingSum, setLoadingSum] = useState(false);\n  const [savedSummaries, setSavedSummaries] = useState([]);\n\n  // Paraphrases\n  const [text, setText] = useState('');\n  const [tone, setTone] = useState('casual');\n  const [paraphrase, setParaphrase] = useState('');\n  const [loadingPara, setLoadingPara] = useState(false);\n  const [savedParaphrases, setSavedParaphrases] = useState([]);\n\n  // Vocab search\n  const [searchWord, setSearchWord] = useState('');\n  const [vocabDef, setVocabDef] = useState('');\n  const [loadingGenWord, setLoadingGenWord] = useState(false);\n  const [loadingSearch, setLoadingSearch] = useState(false);\n  const [savedVocabList, setSavedVocabList] = useState([]);\n\n  // Manual vocab\n  const [manualWord, setManualWord] = useState('');\n  const [manualMeaning, setManualMeaning] = useState('');\n\n  // Manual extraction\n  const [manualText, setManualText] = useState('');\n  const [extractedManual, setExtractedManual] = useState([]);\n  const [loadingExtractManual, setLoadingExtractManual] = useState(false);\n\n  // AI extraction\n  const [aiParagraph, setAiParagraph] = useState('');\n  const [extractedAi, setExtractedAi] = useState([]);\n  const [loadingGenAiPara, setLoadingGenAiPara] = useState(false);\n  const [loadingExtractAi, setLoadingExtractAi] = useState(false);\n\n  // UI message\n  const [message, setMessage] = useState('');\n\n  // ─── LOAD USER DATA ───────────────────────────────────────────────\n  const loadData = async () => {\n    try {\n      const [sumRes, paraRes, vocabRes] = await Promise.all([fetch(`/summaries?username=${username}`), fetch(`/paraphrases?username=${username}`), fetch(`/vocab-list?username=${username}`)]);\n      setSavedSummaries(await sumRes.json());\n      setSavedParaphrases(await paraRes.json());\n      setSavedVocabList(await vocabRes.json());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    if (username) loadData();\n  }, [username]);\n\n  // ─── HANDLERS ────────────────────────────────────────────────────\n\n  // Summarise\n  const genNotes = async () => {\n    setLoadingSum(true);\n    setMessage('');\n    try {\n      const res = await fetch('/generate-note', {\n        method: 'POST'\n      });\n      const {\n        note\n      } = await res.json();\n      setRawNotes(note || '');\n    } catch {\n      setMessage('Error generating notes');\n    } finally {\n      setLoadingSum(false);\n    }\n  };\n  const doSumm = async () => {\n    if (!rawNotes.trim() && !file) {\n      setMessage('Paste notes or choose a file');\n      return;\n    }\n    setLoadingSum(true);\n    setMessage('');\n    try {\n      let data;\n      if (rawNotes.trim()) {\n        data = await (await fetch('/summarize-text', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            text: rawNotes\n          })\n        })).json();\n      } else {\n        const form = new FormData();\n        form.append('file', file);\n        data = await (await fetch('/summarize', {\n          method: 'POST',\n          body: form\n        })).json();\n      }\n      setSummary(data.summary || '');\n    } catch {\n      setMessage('Error summarising');\n    } finally {\n      setLoadingSum(false);\n    }\n  };\n  const saveSum = async () => {\n    if (!summary) return;\n    try {\n      await fetch('/save-summary', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          content: summary\n        })\n      });\n      setMessage('Summary saved');\n      loadData();\n    } catch {\n      setMessage('Error saving summary');\n    }\n  };\n\n  // Paraphrase\n  // ★ New: Generate example text to paraphrase\n  const genExample = async () => {\n    setLoadingPara(true);\n    setMessage('');\n    try {\n      const res = await fetch('/generate-note', {\n        method: 'POST'\n      });\n      const {\n        note\n      } = await res.json();\n      setText(note || '');\n    } catch {\n      setMessage('Error generating example');\n    } finally {\n      setLoadingPara(false);\n    }\n  };\n  const doPara = async () => {\n    if (!text.trim()) {\n      setMessage('Enter text to paraphrase');\n      return;\n    }\n    setLoadingPara(true);\n    setMessage('');\n    try {\n      const res = await fetch('/paraphrase-text', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text,\n          tone\n        })\n      });\n      const {\n        content\n      } = await res.json();\n      setParaphrase(content || '');\n    } catch {\n      setMessage('Error paraphrasing');\n    } finally {\n      setLoadingPara(false);\n    }\n  };\n  const savePara = async () => {\n    if (!paraphrase) return;\n    try {\n      await fetch('/save-paraphrase', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          content: paraphrase,\n          tone\n        })\n      });\n      setMessage('Paraphrase saved');\n      loadData();\n    } catch {\n      setMessage('Error saving paraphrase');\n    }\n  };\n\n  // Vocab search (ensure your backend exposes a `/define-word` route)\n  const genWord = async () => {\n    setLoadingGenWord(true);\n    setMessage('');\n    try {\n      const res = await fetch('/generate-word', {\n        method: 'POST'\n      });\n      const {\n        word\n      } = await res.json();\n      setSearchWord(word || '');\n    } catch {\n      setMessage('Error generating word');\n    } finally {\n      setLoadingGenWord(false);\n    }\n  };\n  const defineWord = async () => {\n    if (!searchWord.trim()) {\n      setMessage('Enter a word');\n      return;\n    }\n    setLoadingSearch(true);\n    setMessage('');\n    try {\n      const res = await fetch('/define-word', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          word: searchWord.trim()\n        })\n      });\n      const {\n        content\n      } = await res.json();\n      setVocabDef(content || '');\n    } catch {\n      setMessage('Error defining word');\n    } finally {\n      setLoadingSearch(false);\n    }\n  };\n  const saveVocab = async () => {\n    if (!searchWord || !vocabDef) return;\n    try {\n      await fetch('/save-vocab', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          word: searchWord,\n          definition: vocabDef\n        })\n      });\n      setMessage('Vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving vocab');\n    }\n  };\n  // Manual vocab\n  const saveManual = async () => {\n    if (!manualWord.trim() || !manualMeaning.trim()) {\n      setMessage('Fill both fields');\n      return;\n    }\n    try {\n      await fetch('/save-vocab', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          word: manualWord,\n          definition: manualMeaning\n        })\n      });\n      setMessage('Manual vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving manual vocab');\n    }\n  };\n\n  // Manual extraction\n  const extractManual = async () => {\n    if (!manualText.trim()) {\n      setMessage('Paste a paragraph');\n      return;\n    }\n    setLoadingExtractManual(true);\n    setMessage('');\n    try {\n      const res = await fetch('/extract-vocab', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: manualText\n        })\n      });\n      const {\n        words\n      } = await res.json();\n      setExtractedManual(words || []);\n    } catch {\n      setMessage('Extraction failed');\n    } finally {\n      setLoadingExtractManual(false);\n    }\n  };\n  const saveExtractedManual = async () => {\n    if (!extractedManual.length) return;\n    try {\n      for (const w of extractedManual) {\n        await fetch('/save-vocab', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username,\n            word: w,\n            definition: ''\n          })\n        });\n      }\n      setMessage('Extracted vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving extracted vocab');\n    }\n  };\n\n  // AI extraction\n  const generateAiPara = async () => {\n    setLoadingGenAiPara(true);\n    setMessage('');\n    try {\n      const res = await fetch('/generate-note', {\n        method: 'POST'\n      });\n      const {\n        note\n      } = await res.json();\n      setAiParagraph(note || '');\n    } catch {\n      setMessage('Error generating paragraph');\n    } finally {\n      setLoadingGenAiPara(false);\n    }\n  };\n  const extractAi = async () => {\n    if (!aiParagraph.trim()) {\n      setMessage('Generate paragraph first');\n      return;\n    }\n    setLoadingExtractAi(true);\n    setMessage('');\n    try {\n      const res = await fetch('/extract-vocab', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: aiParagraph\n        })\n      });\n      const {\n        words\n      } = await res.json();\n      setExtractedAi(words || []);\n    } catch {\n      setMessage('Extraction failed');\n    } finally {\n      setLoadingExtractAi(false);\n    }\n  };\n  const saveExtractedAi = async () => {\n    if (!extractedAi.length) return;\n    try {\n      for (const w of extractedAi) {\n        await fetch('/save-vocab', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username,\n            word: w,\n            definition: ''\n          })\n        });\n      }\n      setMessage('AI extracted vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving AI extracted vocab');\n    }\n  };\n\n  // ─── RENDER ──────────────────────────────────────────────────────\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"study-page\",\n    style: bgStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${process.env.PUBLIC_URL}/photos/home.jpg`,\n      alt: \"Home\",\n      className: \"streak-home\",\n      onClick: () => navigate('/home2')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"main-header\",\n      children: \"Let\\u2019s Study\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Paraphrase Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: genExample,\n          disabled: loadingPara,\n          children: loadingPara ? 'Generating…' : 'Generate'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: doPara,\n          disabled: loadingPara,\n          children: loadingPara ? 'Paraphrasing…' : 'Paraphrase'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setText(''),\n          children: \"Clear Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"4\",\n        placeholder: \"Enter or generate text\\u2026\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: tone,\n        onChange: e => setTone(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"casual\",\n          children: \"Casual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"academic\",\n          children: \"Academic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), paraphrase && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"generated-output\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: paraphrase\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: savePara,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              navigator.clipboard.writeText(paraphrase);\n              setMessage('Copied');\n            },\n            children: \"Copy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setParaphrase(''),\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), savedParaphrases.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"generated-output\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Saved Paraphrases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"extracted-list\",\n          children: savedParaphrases.map(p => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [new Date(p.createdAt).toLocaleString(), \" (\", p.tone, \"): \", p.content]\n          }, p._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 5\n  }, this);\n}\n_s(StudyPage, \"Iti1xYT1Hko2CDljuJ+o/dkhpiI=\", false, function () {\n  return [useNavigate];\n});\n_c = StudyPage;\nvar _c;\n$RefreshReg$(_c, \"StudyPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","jsxDEV","_jsxDEV","StudyPage","_s","navigate","username","localStorage","getItem","fileInputRef","bgStyle","backgroundImage","process","env","PUBLIC_URL","backgroundSize","backgroundPosition","backgroundRepeat","rawNotes","setRawNotes","file","setFile","summary","setSummary","loadingSum","setLoadingSum","savedSummaries","setSavedSummaries","text","setText","tone","setTone","paraphrase","setParaphrase","loadingPara","setLoadingPara","savedParaphrases","setSavedParaphrases","searchWord","setSearchWord","vocabDef","setVocabDef","loadingGenWord","setLoadingGenWord","loadingSearch","setLoadingSearch","savedVocabList","setSavedVocabList","manualWord","setManualWord","manualMeaning","setManualMeaning","manualText","setManualText","extractedManual","setExtractedManual","loadingExtractManual","setLoadingExtractManual","aiParagraph","setAiParagraph","extractedAi","setExtractedAi","loadingGenAiPara","setLoadingGenAiPara","loadingExtractAi","setLoadingExtractAi","message","setMessage","loadData","sumRes","paraRes","vocabRes","Promise","all","fetch","json","err","console","error","genNotes","res","method","note","doSumm","trim","data","headers","body","JSON","stringify","form","FormData","append","saveSum","content","genExample","doPara","savePara","genWord","word","defineWord","saveVocab","definition","saveManual","extractManual","words","saveExtractedManual","length","w","generateAiPara","extractAi","saveExtractedAi","className","style","children","src","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","rows","placeholder","value","onChange","e","target","dangerouslySetInnerHTML","__html","navigator","clipboard","writeText","map","p","Date","createdAt","toLocaleString","_id","_c","$RefreshReg$"],"sources":["/Users/nangeaindrahein/study-classmate/client/src/pages/StudyPage.js"],"sourcesContent":["// src/pages/StudyPage.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './StudyPage.css';\n\nexport default function StudyPage() {\n  const navigate = useNavigate();\n  const username = localStorage.getItem('username');\n  const fileInputRef = useRef(null);\n\n  // Background style\n  const bgStyle = {\n    backgroundImage: `url(${process.env.PUBLIC_URL}/photos/pages4.jpg)`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n  };\n\n  // ─── STATE ───────────────────────────────────────────────────────\n  // Summaries\n  const [rawNotes, setRawNotes] = useState('');\n  const [file, setFile] = useState(null);\n  const [summary, setSummary] = useState('');\n  const [loadingSum, setLoadingSum] = useState(false);\n  const [savedSummaries, setSavedSummaries] = useState([]);\n\n  // Paraphrases\n  const [text, setText] = useState('');\n  const [tone, setTone] = useState('casual');\n  const [paraphrase, setParaphrase] = useState('');\n  const [loadingPara, setLoadingPara] = useState(false);\n  const [savedParaphrases, setSavedParaphrases] = useState([]);\n\n  // Vocab search\n  const [searchWord, setSearchWord] = useState('');\n  const [vocabDef, setVocabDef] = useState('');\n  const [loadingGenWord, setLoadingGenWord] = useState(false);\n  const [loadingSearch, setLoadingSearch] = useState(false);\n  const [savedVocabList, setSavedVocabList] = useState([]);\n\n  // Manual vocab\n  const [manualWord, setManualWord] = useState('');\n  const [manualMeaning, setManualMeaning] = useState('');\n\n  // Manual extraction\n  const [manualText, setManualText] = useState('');\n  const [extractedManual, setExtractedManual] = useState([]);\n  const [loadingExtractManual, setLoadingExtractManual] = useState(false);\n\n  // AI extraction\n  const [aiParagraph, setAiParagraph] = useState('');\n  const [extractedAi, setExtractedAi] = useState([]);\n  const [loadingGenAiPara, setLoadingGenAiPara] = useState(false);\n  const [loadingExtractAi, setLoadingExtractAi] = useState(false);\n\n  // UI message\n  const [message, setMessage] = useState('');\n\n  // ─── LOAD USER DATA ───────────────────────────────────────────────\n  const loadData = async () => {\n    try {\n      const [sumRes, paraRes, vocabRes] = await Promise.all([\n        fetch(`/summaries?username=${username}`),\n        fetch(`/paraphrases?username=${username}`),\n        fetch(`/vocab-list?username=${username}`)\n      ]);\n      setSavedSummaries(await sumRes.json());\n      setSavedParaphrases(await paraRes.json());\n      setSavedVocabList(await vocabRes.json());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    if (username) loadData();\n  }, [username]);\n\n  // ─── HANDLERS ────────────────────────────────────────────────────\n\n  // Summarise\n  const genNotes = async () => {\n    setLoadingSum(true);\n    setMessage('');\n    try {\n      const res = await fetch('/generate-note', { method: 'POST' });\n      const { note } = await res.json();\n      setRawNotes(note || '');\n    } catch {\n      setMessage('Error generating notes');\n    } finally {\n      setLoadingSum(false);\n    }\n  };\n\n  const doSumm = async () => {\n    if (!rawNotes.trim() && !file) {\n      setMessage('Paste notes or choose a file');\n      return;\n    }\n    setLoadingSum(true);\n    setMessage('');\n    try {\n      let data;\n      if (rawNotes.trim()) {\n        data = await (await fetch('/summarize-text', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ text: rawNotes }),\n        })).json();\n      } else {\n        const form = new FormData();\n        form.append('file', file);\n        data = await (await fetch('/summarize', { method: 'POST', body: form })).json();\n      }\n      setSummary(data.summary || '');\n    } catch {\n      setMessage('Error summarising');\n    } finally {\n      setLoadingSum(false);\n    }\n  };\n\n  const saveSum = async () => {\n    if (!summary) return;\n    try {\n      await fetch('/save-summary', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, content: summary }),\n      });\n      setMessage('Summary saved');\n      loadData();\n    } catch {\n      setMessage('Error saving summary');\n    }\n  };\n\n  // Paraphrase\n  // ★ New: Generate example text to paraphrase\n  const genExample = async () => {\n    setLoadingPara(true);\n    setMessage('');\n    try {\n      const res = await fetch('/generate-note', { method: 'POST' });\n      const { note } = await res.json();\n      setText(note || '');\n    } catch {\n      setMessage('Error generating example');\n    } finally {\n      setLoadingPara(false);\n    }\n  };\n\n  const doPara = async () => {\n    if (!text.trim()) {\n      setMessage('Enter text to paraphrase');\n      return;\n    }\n    setLoadingPara(true);\n    setMessage('');\n    try {\n      const res = await fetch('/paraphrase-text', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text, tone }),\n      });\n      const { content } = await res.json();\n      setParaphrase(content || '');\n    } catch {\n      setMessage('Error paraphrasing');\n    } finally {\n      setLoadingPara(false);\n    }\n  };\n\n  const savePara = async () => {\n    if (!paraphrase) return;\n    try {\n      await fetch('/save-paraphrase', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, content: paraphrase, tone }),\n      });\n      setMessage('Paraphrase saved');\n      loadData();\n    } catch {\n      setMessage('Error saving paraphrase');\n    }\n  };\n\n  // Vocab search (ensure your backend exposes a `/define-word` route)\n  const genWord = async () => {\n    setLoadingGenWord(true);\n    setMessage('');\n    try {\n      const res = await fetch('/generate-word', { method: 'POST' });\n      const { word } = await res.json();\n      setSearchWord(word || '');\n    } catch {\n      setMessage('Error generating word');\n    } finally {\n      setLoadingGenWord(false);\n    }\n  };\n\n  const defineWord = async () => {\n    if (!searchWord.trim()) {\n      setMessage('Enter a word');\n      return;\n    }\n    setLoadingSearch(true);\n    setMessage('');\n    try {\n      const res = await fetch('/define-word', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ word: searchWord.trim() }),\n      });\n      const { content } = await res.json();\n      setVocabDef(content || '');\n    } catch {\n      setMessage('Error defining word');\n    } finally {\n      setLoadingSearch(false);\n    }\n  };\n\n  const saveVocab = async () => {\n    if (!searchWord || !vocabDef) return;\n    try {\n      await fetch('/save-vocab', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, word: searchWord, definition: vocabDef }),\n      });\n      setMessage('Vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving vocab');\n    }\n  };\n  // Manual vocab\n  const saveManual = async () => {\n    if (!manualWord.trim() || !manualMeaning.trim()) {\n      setMessage('Fill both fields'); return;\n    }\n    try {\n      await fetch('/save-vocab', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, word: manualWord, definition: manualMeaning }),\n      });\n      setMessage('Manual vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving manual vocab');\n    }\n  };\n\n  // Manual extraction\n  const extractManual = async () => {\n    if (!manualText.trim()) { setMessage('Paste a paragraph'); return; }\n    setLoadingExtractManual(true); setMessage('');\n    try {\n      const res = await fetch('/extract-vocab', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text: manualText }),\n      });\n      const { words } = await res.json();\n      setExtractedManual(words || []);\n    } catch {\n      setMessage('Extraction failed');\n    } finally {\n      setLoadingExtractManual(false);\n    }\n  };\n  const saveExtractedManual = async () => {\n    if (!extractedManual.length) return;\n    try {\n      for (const w of extractedManual) {\n        await fetch('/save-vocab', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ username, word: w, definition: '' }),\n        });\n      }\n      setMessage('Extracted vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving extracted vocab');\n    }\n  };\n\n  // AI extraction\n  const generateAiPara = async () => {\n    setLoadingGenAiPara(true); setMessage('');\n    try {\n      const res = await fetch('/generate-note', { method: 'POST' });\n      const { note } = await res.json();\n      setAiParagraph(note || '');\n    } catch {\n      setMessage('Error generating paragraph');\n    } finally {\n      setLoadingGenAiPara(false);\n    }\n  };\n  const extractAi = async () => {\n    if (!aiParagraph.trim()) { setMessage('Generate paragraph first'); return; }\n    setLoadingExtractAi(true); setMessage('');\n    try {\n      const res = await fetch('/extract-vocab', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text: aiParagraph }),\n      });\n      const { words } = await res.json();\n      setExtractedAi(words || []);\n    } catch {\n      setMessage('Extraction failed');\n    } finally {\n      setLoadingExtractAi(false);\n    }\n  };\n  const saveExtractedAi = async () => {\n    if (!extractedAi.length) return;\n    try {\n      for (const w of extractedAi) {\n        await fetch('/save-vocab', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ username, word: w, definition: '' }),\n        });\n      }\n      setMessage('AI extracted vocab saved');\n      loadData();\n    } catch {\n      setMessage('Error saving AI extracted vocab');\n    }\n  };\n\n  // ─── RENDER ──────────────────────────────────────────────────────\n  return (\n    <div className=\"study-page\" style={bgStyle}>\n      {/* Home & Header */}\n      <img\n        src={`${process.env.PUBLIC_URL}/photos/home.jpg`}\n        alt=\"Home\"\n        className=\"streak-home\"\n        onClick={() => navigate('/home2')}\n      />\n      <h1 className=\"main-header\">Let’s Study</h1>\n      {message && <div className=\"message\">{message}</div>}\n\n      {/* PARAPHRASE PANEL with new Generate button */}\n      <section className=\"section\">\n        <h2>Paraphrase Note</h2>\n        <div className=\"action-buttons\">\n          <button onClick={genExample} disabled={loadingPara}>\n            {loadingPara ? 'Generating…' : 'Generate'}\n          </button>\n          <button onClick={doPara} disabled={loadingPara}>\n            {loadingPara ? 'Paraphrasing…' : 'Paraphrase'}\n          </button>\n          <button onClick={() => setText('')}>Clear Text</button>\n        </div>\n        <textarea\n          rows=\"4\"\n          placeholder=\"Enter or generate text…\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n        <select value={tone} onChange={e => setTone(e.target.value)}>\n          <option value=\"casual\">Casual</option>\n          <option value=\"academic\">Academic</option>\n        </select>\n\n        {paraphrase && (\n          <div className=\"generated-output\">\n            <div dangerouslySetInnerHTML={{ __html: paraphrase }} />\n            <div className=\"action-buttons\">\n              <button onClick={savePara}>Save</button>\n              <button onClick={() => { navigator.clipboard.writeText(paraphrase); setMessage('Copied'); }}>\n                Copy\n              </button>\n              <button onClick={() => setParaphrase('')}>Clear</button>\n            </div>\n          </div>\n        )}\n\n        {savedParaphrases.length > 0 && (\n          <div className=\"generated-output\">\n            <h3>Saved Paraphrases</h3>\n            <ul className=\"extracted-list\">\n              {savedParaphrases.map(p => (\n                <li key={p._id}>\n                  {new Date(p.createdAt).toLocaleString()} ({p.tone}): {p.content}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </section>\n\n      {/* …the rest of your panels (Summarise, Vocab Search, Extraction) */}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}