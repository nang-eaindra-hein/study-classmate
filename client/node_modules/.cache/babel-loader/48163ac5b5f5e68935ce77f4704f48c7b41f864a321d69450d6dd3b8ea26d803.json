{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // Running on localhost. Check if service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('✅ Service worker is ready (localhost)');\n        });\n      } else {\n        // Register service worker for production.\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    if (registration.waiting) {\n      console.log('🟡 New content is available; please refresh.');\n    }\n    if (config && config.onUpdate) {\n      config.onUpdate(registration);\n    }\n  }).catch(error => {\n    console.error('❌ Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl).then(response => {\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType && contentType.indexOf('javascript') === -1) {\n      // Service worker not found. Reload page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('⚠️ No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => registration.unregister()).catch(error => console.error(error));\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","waiting","onUpdate","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"sources":["/Users/nangeaindrahein/study-classmate/client/src/serviceWorkerRegistration.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // Running on localhost. Check if service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('✅ Service worker is ready (localhost)');\n        });\n      } else {\n        // Register service worker for production.\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      if (registration.waiting) {\n        console.log('🟡 New content is available; please refresh.');\n      }\n\n      if (config && config.onUpdate) {\n        config.onUpdate(registration);\n      }\n    })\n    .catch(error => {\n      console.error('❌ Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl)\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType && contentType.indexOf('javascript') === -1)\n      ) {\n        // Service worker not found. Reload page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('⚠️ No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => registration.unregister())\n      .catch(error => console.error(error));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}